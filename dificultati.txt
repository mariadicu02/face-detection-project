
🧩 Documentație depanare completă – Moodle pe Raspberry Pi + Sistem prezență facială
------------------------------------------------------------------------------------

📌 Problemă: Moodle nu se încarcă local (timeout la http://localhost/moodle)

🔍 Simptome:
- Pagina rămânea blocată în browser.
- Eroare: ERR_CONNECTION_TIMED_OUT
- Accesul la http://localhost funcționa, dar nu și http://localhost/moodle.

🧪 Cauze:
1. Moodle fusese configurat anterior pe altă rețea.
2. Fișierul config.php conținea o adresă IP veche și invalidă.
3. Apache funcționa, dar redirectul spre IP-ul anterior bloca accesul.

✅ Soluție:
1. Verificare IP curent:
   ip a
   → Ex: 192.168.0.101

2. Verificare Apache:
   sudo systemctl status apache2

3. Verificare structură fișiere:
   ls /var/www/html/

4. Editare config.php:
   sudo nano /var/www/html/moodle/config.php
   Linia modificată:
   $CFG->wwwroot = 'http://localhost/moodle';

5. Salvare și reîncărcare → Moodle a funcționat corect.

🔐 Integrare REST API Moodle – Probleme și depanare

1️⃣ Problemă: HTTP 403 Forbidden
Simptome:
- Mesaj în script: [❌] Eroare HTTP: 403
- În browser: Access denied

Cauză:
- Protocolul REST nu era activat în Moodle.

Soluție:
- Navigare:
  Site administration > Plugins > Web services > Manage protocols
- Bifare REST → Save changes

2️⃣ Problemă: Token valid, dar serviciu fără permisiuni
Simptome:
- Scriptul returna eroarea:
  "Expecting value: line 1 column 1 (char 0)"

Diagnostic:
- Tokenul era asociat unui serviciu care nu avea funcțiile necesare.

Soluție:
- Navigare:
  Site administration > Server > Web services > External services
- Selectare serviciu (ex: AttendanceService)
- Adăugare manuală funcții:
  - core_webservice_get_site_info
  - mod_attendance_get_sessions
  - mod_attendance_update_user_status

3️⃣ Problemă: Funcțiile nu apăreau în răspunsul JSON
Cauză:
- Funcțiile REST nu erau încă adăugate serviciului tokenului.

Soluție:
- External services > AttendanceService > Add functions
- Adăugare funcții lipsă (ex: mod_attendance_get_user_statuses)

🧠 Problemă nouă: Eroare în marcarea prezenței – invalidparameter

Context:
- Scriptul facial_detection.py recunoaște corect fața → obține ID-ul studentului și al sesiunii.
- În pasul final, marcarea prezenței eșuează cu mesajul:
  "Invalid parameter value detected (Missing required key in single structure: studentid)"

Diagnostic:
- Moodle așteaptă parametrii într-o structură de tip dicționar, nu forma updates[0][studentid].

Soluție:
- Înlocuire cod:
  updates[0][studentid] → updates: [{"studentid": ..., "statusid": ...}]
- Trimitere JSON cu:
  headers={'Content-Type': 'application/json'}, json=data

⚠️ Alte probleme tehnice observate

🎥 Eroare cameră OpenCV/GStreamer:
- WARN: Could not read from resource.

Cauză:
- Cameră neconectată sau port GStreamer nefuncțional.

Soluții:
- Confirmare cameră conectată.
- Înlocuire cu cv2.VideoCapture(0)

📷 Calitatea imaginilor pentru recunoaștere:
Probleme:
- Poze neclare → nerecunoscute

Soluții:
- Fotografii frontale, nume format prenume_nume.jpg
- Structură studenti.json corectă

✅ Rezumat funcționare sistem

| Componentă         | Status        | Observații                            |
|--------------------|---------------|----------------------------------------|
| Moodle Local       | ✅ Funcțional | Adresă stabilită pe localhost          |
| REST API           | ✅ Activat     | Funcții complet adăugate              |
| Token              | ✅ Valid       | Asociat AttendanceService             |
| Facial Recognition | ✅ Funcțional | Poze optimizate, encodings salvate    |
| Marcarea prezenței | ✅ OK          | După corectare structură JSON         |

📦 Recomandări mentenanță:
- Verifică config.php la schimbare de rețea.
- Confirmă funcțiile asociate tokenului.
- Rulează script test:
  python test_moodle_connection.py
- Pentru loguri:
  tail -f /var/log/apache2/error.log
