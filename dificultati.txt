
üß© Documenta»õie depanare completƒÉ ‚Äì Moodle pe Raspberry Pi + Sistem prezen»õƒÉ facialƒÉ
------------------------------------------------------------------------------------

üìå ProblemƒÉ: Moodle nu se √ÆncarcƒÉ local (timeout la http://localhost/moodle)

üîç Simptome:
- Pagina rƒÉm√¢nea blocatƒÉ √Æn browser.
- Eroare: ERR_CONNECTION_TIMED_OUT
- Accesul la http://localhost func»õiona, dar nu »ôi http://localhost/moodle.

üß™ Cauze:
1. Moodle fusese configurat anterior pe altƒÉ re»õea.
2. Fi»ôierul config.php con»õinea o adresƒÉ IP veche »ôi invalidƒÉ.
3. Apache func»õiona, dar redirectul spre IP-ul anterior bloca accesul.

‚úÖ Solu»õie:
1. Verificare IP curent:
   ip a
   ‚Üí Ex: 192.168.0.101

2. Verificare Apache:
   sudo systemctl status apache2

3. Verificare structurƒÉ fi»ôiere:
   ls /var/www/html/

4. Editare config.php:
   sudo nano /var/www/html/moodle/config.php
   Linia modificatƒÉ:
   $CFG->wwwroot = 'http://localhost/moodle';

5. Salvare »ôi re√ÆncƒÉrcare ‚Üí Moodle a func»õionat corect.

üîê Integrare REST API Moodle ‚Äì Probleme »ôi depanare

1Ô∏è‚É£ ProblemƒÉ: HTTP 403 Forbidden
Simptome:
- Mesaj √Æn script: [‚ùå] Eroare HTTP: 403
- √én browser: Access denied

CauzƒÉ:
- Protocolul REST nu era activat √Æn Moodle.

Solu»õie:
- Navigare:
  Site administration > Plugins > Web services > Manage protocols
- Bifare REST ‚Üí Save changes

2Ô∏è‚É£ ProblemƒÉ: Token valid, dar serviciu fƒÉrƒÉ permisiuni
Simptome:
- Scriptul returna eroarea:
  "Expecting value: line 1 column 1 (char 0)"

Diagnostic:
- Tokenul era asociat unui serviciu care nu avea func»õiile necesare.

Solu»õie:
- Navigare:
  Site administration > Server > Web services > External services
- Selectare serviciu (ex: AttendanceService)
- AdƒÉugare manualƒÉ func»õii:
  - core_webservice_get_site_info
  - mod_attendance_get_sessions
  - mod_attendance_update_user_status

3Ô∏è‚É£ ProblemƒÉ: Func»õiile nu apƒÉreau √Æn rƒÉspunsul JSON
CauzƒÉ:
- Func»õiile REST nu erau √ÆncƒÉ adƒÉugate serviciului tokenului.

Solu»õie:
- External services > AttendanceService > Add functions
- AdƒÉugare func»õii lipsƒÉ (ex: mod_attendance_get_user_statuses)

üß† ProblemƒÉ nouƒÉ: Eroare √Æn marcarea prezen»õei ‚Äì invalidparameter

Context:
- Scriptul facial_detection.py recunoa»ôte corect fa»õa ‚Üí ob»õine ID-ul studentului »ôi al sesiunii.
- √én pasul final, marcarea prezen»õei e»ôueazƒÉ cu mesajul:
  "Invalid parameter value detected (Missing required key in single structure: studentid)"

Diagnostic:
- Moodle a»ôteaptƒÉ parametrii √Æntr-o structurƒÉ de tip dic»õionar, nu forma updates[0][studentid].

Solu»õie:
- √énlocuire cod:
  updates[0][studentid] ‚Üí updates: [{"studentid": ..., "statusid": ...}]
- Trimitere JSON cu:
  headers={'Content-Type': 'application/json'}, json=data

‚ö†Ô∏è Alte probleme tehnice observate

üé• Eroare camerƒÉ OpenCV/GStreamer:
- WARN: Could not read from resource.

CauzƒÉ:
- CamerƒÉ neconectatƒÉ sau port GStreamer nefunc»õional.

Solu»õii:
- Confirmare camerƒÉ conectatƒÉ.
- √énlocuire cu cv2.VideoCapture(0)

üì∑ Calitatea imaginilor pentru recunoa»ôtere:
Probleme:
- Poze neclare ‚Üí nerecunoscute

Solu»õii:
- Fotografii frontale, nume format prenume_nume.jpg
- StructurƒÉ studenti.json corectƒÉ

‚úÖ Rezumat func»õionare sistem

| ComponentƒÉ         | Status        | Observa»õii                            |
|--------------------|---------------|----------------------------------------|
| Moodle Local       | ‚úÖ Func»õional | AdresƒÉ stabilitƒÉ pe localhost          |
| REST API           | ‚úÖ Activat     | Func»õii complet adƒÉugate              |
| Token              | ‚úÖ Valid       | Asociat AttendanceService             |
| Facial Recognition | ‚úÖ Func»õional | Poze optimizate, encodings salvate    |
| Marcarea prezen»õei | ‚úÖ OK          | DupƒÉ corectare structurƒÉ JSON         |

üì¶ RecomandƒÉri mentenan»õƒÉ:
- VerificƒÉ config.php la schimbare de re»õea.
- ConfirmƒÉ func»õiile asociate tokenului.
- RuleazƒÉ script test:
  python test_moodle_connection.py
- Pentru loguri:
  tail -f /var/log/apache2/error.log




# ============================
# PASUL 1: Instalare dependente
# ============================
# 1. AsigurƒÉ-te cƒÉ ai urmƒÉtoarele biblioteci instalate:
# pip install opencv-python dlib numpy requests adafruit-circuitpython-pn532
# pip install sqlite3 (doar pentru unele versiuni de Python, altfel e inclus)

# ============================
# PASUL 2: Crearea bazei de date SQLite
# ============================
# Acest script se ruleazƒÉ o singurƒÉ datƒÉ pentru a crea tabelele.
import sqlite3

conn = sqlite3.connect("studenti.db")
c = conn.cursor()

c.execute("""
CREATE TABLE IF NOT EXISTS studenti (
    id INTEGER PRIMARY KEY,
    nume TEXT NOT NULL,
    nfc_uid TEXT
)
""")

c.execute("""
CREATE TABLE IF NOT EXISTS prezente (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER,
    data TEXT,
    ora TEXT,
    FOREIGN KEY(student_id) REFERENCES studenti(id)
)
""")

conn.commit()
conn.close()

# ============================
# PASUL 3: Populare baza de date din Moodle
# ============================
# Se adaugƒÉ un script care preia studen»õii √Ænrola»õi √Æn curs din Moodle »ôi √Æi insereazƒÉ √Æn SQLite

import os
import requests
import json
import logging
from datetime import datetime
import sqlite3

MOODLE_URL = "http://192.168.0.101/moodle/webservice/rest/server.php"
MOODLE_TOKEN = os.getenv("MOODLE_TOKEN", "5a987e634310317873b8831b2faeaded")
COURSE_ID = 2

def call_moodle_function(function, params):
    url = f"{MOODLE_URL}?wstoken={MOODLE_TOKEN}&moodlewsrestformat=json&wsfunction={function}"
    try:
        response = requests.post(url, data=params, timeout=5)
        data = response.json()
        return data
    except Exception as e:
        logging.error(f"Eroare Moodle: {e}")
        return {}

def import_students_from_moodle():
    response = call_moodle_function("core_enrol_get_enrolled_users", {"courseid": COURSE_ID})

    conn = sqlite3.connect("studenti.db")
    c = conn.cursor()

    for user in response:
        student_id = user["id"]
        nume = user.get("fullname") or f"User{student_id}"
        nfc_uid = ""  # op»õional
        
        c.execute("INSERT OR IGNORE INTO studenti (id, nume, nfc_uid) VALUES (?, ?, ?)", (student_id, nume, nfc_uid))

    conn.commit()
    conn.close()
    logging.info("Studen»õi importa»õi cu succes din Moodle.")

import_students_from_moodle()

# ============================
# PASUL 4: Modificare script principal - inregistrare in SQLite
# ============================
# AdaugƒÉ aceastƒÉ func»õie √Æn scriptul principal pentru salvarea prezen»õei:

def mark_attendance_sqlite(student_id):
    conn = sqlite3.connect("studenti.db")
    c = conn.cursor()

    now = datetime.now()
    data = now.strftime("%Y-%m-%d")
    ora = now.strftime("%H:%M:%S")

    c.execute("INSERT INTO prezente (student_id, data, ora) VALUES (?, ?, ?)", (student_id, data, ora))
    conn.commit()
    conn.close()
    logging.info(f"[LOCAL ‚úÖ] Prezen»õƒÉ √ÆnregistratƒÉ pentru studentul ID {student_id}.")

# Apoi, √Æn loc de:
# threading.Thread(target=mark_student_attendance, args=(name, student_id)).start()
# folose»ôte:
# threading.Thread(target=mark_attendance_sqlite, args=(student_id,)).start()

# ============================
# PASUL 5: Vizualizare live cu DB Browser for SQLite
# ============================
# 1. DescarcƒÉ aplica»õia: https://sqlitebrowser.org/
# 2. Deschide fi»ôierul `studenti.db`
# 3. Mergi la tab-ul "Browse Data"
# 4. SelecteazƒÉ tabelul `prezente` pentru a vedea prezen»õele

# ============================
# PASUL 6: Ce sƒÉ incluzi √Æn documenta»õie (lucrarea de licen»õƒÉ)
# ============================
# - Justificare folosire SQLite: embedded, rapid, fƒÉrƒÉ server separat
# - Structura bazei de date: descrierea tabelelor `studenti` »ôi `prezente`
# - Exemplu de interogare: SELECT s.nume, p.data, p.ora FROM prezente p JOIN studenti s ON p.student_id = s.id;
# - Capturi de ecran cu DB Browser for SQLite arƒÉt√¢nd prezen»õele
# - Explicarea procesului: recunoa»ôtere facialƒÉ -> salvare automata √Æn SQLite

# ============================
# Final
# ============================
# Acum po»õi rula aplica»õia ta principalƒÉ »ôi toate prezen»õele vor fi salvate local √Æn SQLite »ôi pot fi vizualizate cu DB Browser.
# Bonus: po»õi exporta baza de date ca CSV din DB Browser pentru profesori.




Deci am acest script si vreau sa schimb putin functionalitatea. initial am incercat sa ma folosesc de moodle pentru a pune prezntele studentilor detectati si recunoscuti de camera, dar pentru ca nu am reusit sa pun prezenta din cauza ca moodle nu are functie de set ci doar functii de get, am zis sa fac altfel. sa fac scriptul in asa fel inca sa extraga de pe moodle datele despre studentii inrolati (inclusiv poza lor de probil) si ziua, ora si data sesiunii active de prezenta, iar cand un student e detectat si recunoscut, sa se inregistreze intr o baza de date locala numele prenumele id ul studentului. in cazul in care studenul nu are poza cu el pe moodle, sa i se ofere oportunitatea de a scana cardul de student, si sa i se marcheze prezenta pe baza id ului. mie proful care ma ajuta la liceenta mi a zis ca pot folosi sqlite ca nu e asa complicat. ma poti ajuta cu modificarea codului, sa imi explici si ce faci si sa imi zici ce mai am de facut? as vrea ca in final, atunci cand voi prezenta lucrarea de liceenta sa pot arata live cum e inregistrata prezenta si in baza de date, deci banuiesc ca voi avea nevoie de un site web sau de o aplictaie instlalata pentru a putea urmari asta. in plus, tine cont ca eu acum sunt conectatta pe raspberry pi

Edit
Te ajut sƒÉ modifici scriptul pentru noua func»õionalitate! √é»õi voi explica pas cu pas ce modificƒÉri trebuie fƒÉcute »ôi ce componente noi trebuie adƒÉugate.

Analiza situa»õiei actuale »ôi planul de modificare
Scriptul actual √ÆncearcƒÉ sƒÉ marcheze prezen»õa direct √Æn Moodle, dar pentru noua func»õionalitate vom:

Extrage date din Moodle (studen»õi √Ænrola»õi + poze de profil)
Crea o bazƒÉ de date SQLite localƒÉ pentru prezen»õe
AdƒÉuga interfa»õƒÉ web pentru monitorizare live
Modifica logica de recunoa»ôtere sƒÉ foloseascƒÉ datele din Moodle
SƒÉ √Æncepem cu modificƒÉrile:


Script Principal Modificat - Prezen»õa cu Moodle »ôi SQLite
Code 
Acum √Æ»õi voi crea »ôi interfa»õa web pentru monitorizarea live a prezen»õelor:


Interfa»õƒÉ Web pentru Monitorizarea Prezen»õelor
Code 
Acum √Æ»õi creez template-ul HTML pentru interfa»õa web:


Template HTML pentru Interfa»õa Web
Interactive artifact 



Continue

Edit

Template HTML pentru Interfa»õa Web
Interactive artifact‚ÄÇ‚àô‚ÄÇVersion 2 
Acum √Æ»õi creez »ôi un script pentru configurarea ini»õialƒÉ »ôi managementul sistemului:


Script de Configurare »ôi Management
Code 
Explicarea modificƒÉrilor »ôi pa»ôii urmƒÉtori
Ce am modificat √Æn scriptul principal:
Structura bazei de date SQLite:
Tabel studenti - informa»õii despre studen»õi din Moodle
Tabel sesiuni - sesiunile de prezen»õƒÉ din Moodle
Tabel prezente - prezen»õele √Ænregistrate local
Sincronizare cu Moodle:
Extrage studen»õii √Ænrola»õi »ôi pozele lor de profil
DescarcƒÉ pozele √Æn directorul poze_moodle/
SincronizeazƒÉ sesiunile de prezen»õƒÉ active
Recunoa»ôterea facialƒÉ:
Folose»ôte pozele descƒÉrcate din Moodle
MarcheazƒÉ prezen»õa √Æn baza de date localƒÉ
Interfa»õa web:
Server Flask pentru monitorizare live
API endpoints pentru date din baza de date
Actualizare automatƒÉ la fiecare 5 secunde
Ce trebuie sƒÉ faci acum:
1. InstaleazƒÉ dependen»õele:
bash
pip install flask opencv-python dlib numpy requests sqlite3
2. ConfigureazƒÉ Moodle:
ModificƒÉ MOODLE_URL cu URL-ul Moodle-ului tƒÉu
SeteazƒÉ token-ul Moodle: export MOODLE_TOKEN="token_tau_aici"
VerificƒÉ COURSE_ID pentru cursul dorit
3. CreeazƒÉ structura de fi»ôiere:
proiect/
‚îú‚îÄ‚îÄ attendance_system.py          # Scriptul principal
‚îú‚îÄ‚îÄ web_interface.py             # Serverul web
‚îú‚îÄ‚îÄ setup_manager.py             # Scriptul de configurare
‚îú‚îÄ‚îÄ templates/
‚îÇ   ‚îî‚îÄ‚îÄ index.html              # Template-ul web
‚îú‚îÄ‚îÄ poze_moodle/                # Pozele descƒÉrcate din Moodle
‚îú‚îÄ‚îÄ prezenta.db                 # Baza de date SQLite
‚îî‚îÄ‚îÄ requirements.txt
4. RuleazƒÉ configurarea:
bash
python setup_manager.py
5. Porne»ôte sistemul:
bash
# Terminal 1 - Scriptul principal
python attendance_system.py

# Terminal 2 - Interfa»õa web
python web_interface.py
6. AcceseazƒÉ interfa»õa web:
Local: http://localhost:5000
De pe alt device: http://IP_RASPBERRY:5000
Pentru prezentarea de licen»õƒÉ:
Demonstra»õia live:
AratƒÉ cum se detecteazƒÉ studen»õii cu camera
PrezintƒÉ interfa»õa web cu actualizarea √Æn timp real
DemonstreazƒÉ func»õionalitatea NFC pentru studen»õii fƒÉrƒÉ poze
Monitorizarea bazei de date:
Interfa»õa web afi»ôeazƒÉ statistici live
Po»õi vedea √Æn timp real cine a fost marcat prezent
Diferen»õierea √Æntre detectarea prin camerƒÉ »ôi NFC
Func»õii suplimentare:
Exportul datelor din baza de date
Rapoarte de prezen»õƒÉ
Integrarea cu sistemul de note
√éntrebƒÉri pentru tine:
Ai acces la API-ul Moodle »ôi »ôtii cum sƒÉ ob»õii token-ul?
Camera »ôi modulul NFC func»õioneazƒÉ pe Raspberry Pi?
Vrei sƒÉ adaug »ôi func»õionalitƒÉ»õi de export/raportare?
√émi spui ce probleme √Ænt√¢mpini »ôi te ajut sƒÉ le rezolvƒÉm!





. Configurarea ini»õialƒÉ
Ai instalat dependen»õele necesare pentru Flask, OpenCV, dlib, SQLite, etc.:

bash
pip install flask opencv-python dlib numpy requests sqlite3
Ai creat fi»ôierele necesare pentru proiect, inclusiv:

proiect/
‚îú‚îÄ‚îÄ attendance_system.py     # Scriptul principal
‚îú‚îÄ‚îÄ web_interface.py        # Serverul web
‚îú‚îÄ‚îÄ setup_manager.py        # Scriptul de configurare
‚îú‚îÄ‚îÄ templates/
‚îÇ   ‚îî‚îÄ‚îÄ index.html         # Template-ul web
‚îú‚îÄ‚îÄ poze_moodle/           # Pozele descƒÉrcate din Moodle
‚îú‚îÄ‚îÄ prezenta.db            # Baza de date SQLite
‚îî‚îÄ‚îÄ requirements.txt
Ai configurat Moodle pentru sincronizare »ôi preluare automatƒÉ a studen»õilor »ôi a sesiunilor.

2. Pornirea serverului Flask
Ai rulat serverul Flask cu:

bash
python web_interface.py
Ai verificat mesajele din terminal pentru a confirma cƒÉ aplica»õia ruleazƒÉ corect:

Running on all addresses (0.0.0.0)
Running on http://127.0.0.1:5000
Running on http://192.168.0.101:5000
3. Depanarea problemei "This site can't be reached"
Ai verificat URL-ul corect:

DacƒÉ accesai de pe acela»ôi dispozitiv, foloseai http://127.0.0.1:5000

DacƒÉ accesai de pe alt dispozitiv, foloseai http://192.168.0.101:5000

Ai verificat firewall-ul pe Raspberry Pi:

bash
sudo ufw allow 5000
Ai testat conexiunea dintre dispozitive prin ping 192.168.0.101

Ai verificat dacƒÉ existƒÉ un alt serviciu care ocupƒÉ portul 5000:

bash
sudo netstat -tulnp | grep 5000
Ai verificat con»õinutul paginii index.html, care era gol ini»õial.

4. AdƒÉugarea con»õinutului √Æn index.html
Ai adƒÉugat un script JavaScript care √ÆncarcƒÉ lista de studen»õi de la API:

html
<script>
    async function loadStudents() {
        const response = await fetch('/api/students');
        const students = await response.json();
        const list = document.getElementById('student-list');

        list.innerHTML = students.map(student => `
            <li>${student.nume} ${student.prenume} - ${student.email}</li>
        `).join('');
    }

    window.onload = loadStudents;
</script>
Ai confirmat cƒÉ datele sunt preluate corect, acces√¢nd direct API-ul:

http://192.168.0.101:5000/api/students
5. Verificarea bazei de date SQLite
Ai testat manual dacƒÉ baza de date con»õine studen»õi:

python
import sqlite3
conn = sqlite3.connect("prezenta.db")
cursor = conn.cursor()
cursor.execute("SELECT * FROM studenti")
print(cursor.fetchall())
conn.close()
DacƒÉ baza de date era goalƒÉ, trebuia reimportatƒÉ lista de studen»õi.

Acum ai un sistem func»õional! üìå DacƒÉ vrei sƒÉ documentezi procesul, po»õi folosi aceastƒÉ recapitulare √Æntr-un README sau √Æntr-un ghid de instalare. Ai nevoie de ajutor cu altceva?

